================================================================================
           PROYECTO CHATBOT CON SEGURIDAD SHA256 - EXPLICACION COMPLETA
================================================================================

📅 Fecha: 10 de Octubre 2025
👤 Desarrollador: Sistema de Chatbot Seguro
🎯 Objetivo: Chat con cifrado y verificacion de integridad SHA256

================================================================================
                            ¿QUE ES ESTE PROYECTO?
================================================================================

Este es un sistema de CHAT MULTIUSUARIO que permite que varias personas hablen
en tiempo real a traves de internet, pero con SEGURIDAD adicional.

ANALOGIA SIMPLE:
- Imagina WhatsApp, pero TU controlas el servidor
- Los mensajes se CIFRAN (como un codigo secreto)
- Los mensajes tienen un SELLO DE SEGURIDAD (SHA256) para verificar que nadie
  los cambio en el camino

================================================================================
                        ¿QUE TECNOLOGIAS USA EL PROYECTO?
================================================================================

1. PYTHON
   - Lenguaje de programacion principal
   - Facil de entender y mantener

2. FLASK
   - Framework web (como la estructura de una casa)
   - Permite crear paginas web con Python

3. WEBSOCKETS (Flask-SocketIO)
   - Comunicacion en TIEMPO REAL
   - Como una llamada telefonica: ambos lados hablan instantaneamente

4. CIFRADO
   - Convierte mensajes legibles en codigo secreto
   - Solo quien tiene la "llave" puede leerlos

5. HASHING SHA256
   - Crea una "huella digital" unica de cada mensaje
   - Si alguien cambia 1 letra, la huella cambia completamente

================================================================================
                          TENEMOS 2 VERSIONES DEL CHAT
================================================================================

┌─────────────────────────────────────────────────────────────────────────┐
│  VERSION 1: CHATBOT CON CIFRADO SIMETRICO (AES)                        │
├─────────────────────────────────────────────────────────────────────────┤
│  📂 Carpeta: chatbot-simetrico/                                         │
│  🔑 Tipo: Cifrado Simetrico (AES/Fernet)                                │
│  🌐 Puerto: 5001                                                        │
│                                                                         │
│  ¿COMO FUNCIONA?                                                        │
│  - Usa UNA SOLA LLAVE para cifrar y descifrar                          │
│  - Como un candado normal: la misma llave abre y cierra                │
│  - MAS RAPIDO que el cifrado asimetrico                                │
│                                                                         │
│  VENTAJAS:                                                              │
│  ✅ Muy rapido                                                          │
│  ✅ Usa pocos recursos                                                  │
│  ✅ Perfecto para chat en tiempo real                                   │
│                                                                         │
│  DESVENTAJAS:                                                           │
│  ⚠️  Todos necesitan la misma llave secreta                            │
│  ⚠️  Si alguien roba la llave, puede leer todo                         │
└─────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────┐
│  VERSION 2: CHATBOT CON CIFRADO ASIMETRICO (RSA)                       │
├─────────────────────────────────────────────────────────────────────────┤
│  📂 Carpeta: chatbot-asimetrico/                                        │
│  🔑 Tipo: Cifrado Asimetrico (RSA)                                      │
│  🌐 Puerto: 5002                                                        │
│                                                                         │
│  ¿COMO FUNCIONA?                                                        │
│  - Usa DOS LLAVES: una publica y una privada                           │
│  - Llave publica: CIFRA mensajes (todos la tienen)                     │
│  - Llave privada: DESCIFRA mensajes (solo el servidor la tiene)       │
│                                                                         │
│  VENTAJAS:                                                              │
│  ✅ MAS SEGURO                                                          │
│  ✅ No necesitas compartir llave secreta                                │
│  ✅ Aunque roben la llave publica, no pueden descifrar                  │
│                                                                         │
│  DESVENTAJAS:                                                           │
│  ⚠️  Mas lento                                                          │
│  ⚠️  Usa mas recursos del servidor                                      │
└─────────────────────────────────────────────────────────────────────────┘

================================================================================
                     ¿QUE ES SHA256 Y PARA QUE SIRVE?
================================================================================

SHA256 es un ALGORITMO DE HASHING que convierte cualquier texto en una
"huella digital" unica de 64 caracteres.

EJEMPLO PRACTICO:

Mensaje original: "Hola mundo"
SHA256: b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9

Si cambias UNA SOLA LETRA:
Mensaje: "Hola Mundo" (M mayuscula)
SHA256: 56d6f32151ad5d03269a45ffc7d0eff0a71e883f84c60ed1e2121cf517c5e4f4

¿COMO LO USAMOS EN EL CHAT?

1. Usuario escribe: "Hola a todos"

2. Servidor:
   - CIFRA el mensaje: "X7#kL9@mP..." (codigo secreto)
   - CALCULA SHA256: "a3f2c8b1..." (huella digital)

3. Servidor envia ambos:
   - Mensaje cifrado
   - Hash SHA256

4. Cliente receptor:
   - DESCIFRA: "Hola a todos"
   - CALCULA SHA256 del mensaje descifrado
   - COMPARA con el hash recibido
   - Si coinciden = ✅ Mensaje integro
   - Si NO coinciden = ⚠️ Mensaje alterado

================================================================================
                        ¿COMO FUNCIONA EL SISTEMA?
================================================================================

FLUJO COMPLETO DE UN MENSAJE:

USUARIO A escribe mensaje
         ↓
[1] Mensaje plano: "Hola"
         ↓
[2] Se CIFRA: "X7kL9P2..."
         ↓
[3] Se calcula SHA256: "a3f2c8b1..."
         ↓
[4] Se envia por WebSocket:
    - mensaje_cifrado
    - hash_sha256
    - timestamp
    - nombre_usuario
         ↓
[5] SERVIDOR recibe y reenvía a todos
         ↓
[6] USUARIO B recibe:
    - Mensaje cifrado: "X7kL9P2..."
    - Hash: "a3f2c8b1..."
         ↓
[7] DESCIFRA mensaje: "Hola"
         ↓
[8] VERIFICA integridad:
    - Calcula SHA256("Hola")
    - Compara con hash recibido
    - ✅ Si coinciden: muestra mensaje
    - ❌ Si NO coinciden: alerta de alteracion
         ↓
[9] Muestra en pantalla: "Hola"

================================================================================
                          ARCHIVOS DEL PROYECTO
================================================================================

chatbot-simetrico/
├── servidor.py          # Codigo principal del servidor
├── requirements.txt     # Librerias necesarias
└── templates/
    └── chat.html        # Interfaz web del chat

chatbot-asimetrico/
├── servidor.py          # Codigo principal del servidor
├── requirements.txt     # Librerias necesarias
└── templates/
    └── chat.html        # Interfaz web del chat

ARCHIVOS RAIZ:
├── README.md                    # Documentacion en Markdown
├── PROYECTO_EXPLICACION.txt     # Este archivo
├── CONTROL_DE_CAMBIOS.txt       # Historial de versiones
└── requirements.txt             # Dependencias generales

================================================================================
                    ¿COMO EJECUTAR EL PROYECTO?
================================================================================

PASO 1: INSTALAR PYTHON
   - Descargar de: https://www.python.org/
   - Version 3.8 o superior

PASO 2: ABRIR TERMINAL
   - Windows: PowerShell o CMD
   - Mac/Linux: Terminal

PASO 3: IR A LA CARPETA DEL PROYECTO
   cd C:\Users\eeeri\Downloads\ChatbotPython

PASO 4: INSTALAR DEPENDENCIAS

   Para chatbot SIMETRICO:
   cd chatbot-simetrico
   pip install -r requirements.txt

   Para chatbot ASIMETRICO:
   cd chatbot-asimetrico
   pip install -r requirements.txt

PASO 5: EJECUTAR EL SERVIDOR

   Para chatbot SIMETRICO:
   python servidor.py
   (corre en puerto 5001)

   Para chatbot ASIMETRICO:
   python servidor.py
   (corre en puerto 5002)

PASO 6: ABRIR NAVEGADOR
   - Simetrico: http://localhost:5001
   - Asimetrico: http://localhost:5002

PASO 7: CHATEAR
   - Escribe tu nombre
   - Empieza a chatear
   - Invita amigos a la misma URL

================================================================================
                     FUNCIONES DE SEGURIDAD IMPLEMENTADAS
================================================================================

✅ 1. CIFRADO DE MENSAJES
   - Version simetrica: AES-128 (Fernet)
   - Version asimetrica: RSA-2048
   - Protege contenido de mensajes

✅ 2. HASHING SHA256
   - Genera huella digital de cada mensaje
   - Verifica integridad del contenido
   - Detecta alteraciones

✅ 3. WEBSOCKETS SEGUROS
   - Comunicacion en tiempo real
   - Conexion persistente
   - Baja latencia

✅ 4. VALIDACION DE USUARIOS
   - Registro de nombre
   - Seguimiento de conexiones
   - Lista de usuarios activos

================================================================================
                          MEJORAS IMPLEMENTADAS
================================================================================

📌 VERSION 1.0 (Inicial)
   - Chat basico sin cifrado
   - Mensajes en texto plano
   - Sin verificacion de integridad

📌 VERSION 2.0 (Actual - con SHA256)
   ✅ Cifrado simetrico (AES)
   ✅ Cifrado asimetrico (RSA)
   ✅ Hashing SHA256 para verificacion
   ✅ Documentacion completa
   ✅ Control de versiones
   ✅ MD5 de archivos fuente

================================================================================
                      GLOSARIO DE TERMINOS TECNICOS
================================================================================

CIFRADO
   Proceso de convertir texto legible en codigo secreto

DESCIFRADO
   Proceso de convertir codigo secreto de vuelta a texto legible

HASH / HASHING
   Funcion matematica que convierte datos en una "huella digital" unica

SHA256
   Algoritmo de hashing que genera huellas de 256 bits (64 caracteres hex)

MD5
   Algoritmo de hashing para verificar integridad de archivos

AES (Advanced Encryption Standard)
   Algoritmo de cifrado simetrico, muy rapido y seguro

RSA (Rivest-Shamir-Adleman)
   Algoritmo de cifrado asimetrico con llaves publica/privada

WEBSOCKET
   Protocolo de comunicacion bidireccional en tiempo real

FLASK
   Framework web minimalista para Python

FERNET
   Implementacion de cifrado simetrico en Python (usa AES)

================================================================================
                          SOPORTE Y AYUDA
================================================================================

PROBLEMAS COMUNES:

1. ERROR: "No module named flask"
   SOLUCION: pip install -r requirements.txt

2. ERROR: "Port already in use"
   SOLUCION: Cerrar otros servidores o cambiar puerto en servidor.py

3. ERROR: "Connection refused"
   SOLUCION: Verificar que el servidor este corriendo

4. Mensajes no se ven
   SOLUCION: Verificar consola del navegador (F12)

================================================================================
                          PROXIMOS PASOS
================================================================================

POSIBLES MEJORAS FUTURAS:

1. 💾 Persistencia de mensajes en base de datos
2. 🔐 Autenticacion con contraseñas
3. 🖼️ Soporte para imagenes y archivos
4. 🌍 Despliegue en servidor publico
5. 📱 Version mobile responsive
6. 🔔 Notificaciones de mensajes nuevos
7. 🎨 Temas personalizables
8. 📊 Dashboard de estadisticas

================================================================================
                              CONTACTO
================================================================================

Para reportar errores o sugerir mejoras:
- Revisar documentacion en README.md
- Verificar CONTROL_DE_CAMBIOS.txt
- Consultar archivos de codigo fuente

================================================================================
                          FIN DE LA EXPLICACION
================================================================================

Este documento explica de manera simple el funcionamiento del proyecto.
Para detalles tecnicos, revisar el codigo fuente en servidor.py

Ultima actualizacion: 10 de Octubre 2025
