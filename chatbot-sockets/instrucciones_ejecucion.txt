╔═══════════════════════════════════════════════════════════════╗
║  INSTRUCCIONES - CHATBOT MULTIUSUARIO (SOCKETS) - MEJORADO   ║
╚═══════════════════════════════════════════════════════════════╝

Este es un chat multiusuario con nombres personalizados y lista
de usuarios en tiempo real. NO usa inteligencia artificial.

═══════════════════════════════════════════════════════════════

📋 PASOS PARA EJECUTAR:

1️⃣  Abrir una terminal/consola en ESTA carpeta (chatbot-sockets)

2️⃣  Instalar las dependencias (solo la primera vez):

    pip install -r requirements.txt

3️⃣  Ejecutar el servidor:

    python servidor.py

4️⃣  Abrir el navegador y visitar:

    http://localhost:5000

5️⃣  Ingresa tu nombre cuando aparezca el modal

═══════════════════════════════════════════════════════════════

✨ NUEVAS CARACTERÍSTICAS:

✅ Modal de entrada con nombre personalizado
✅ Lista de usuarios conectados en tiempo real (sidebar izquierdo)
✅ Identificación clara de cada usuario por su nombre
✅ Mensajes diferenciados (tus mensajes vs mensajes de otros)
✅ Notificaciones cuando alguien entra o sale del chat
✅ Contador de usuarios conectados
✅ Diseño mejorado con avatares y colores

═══════════════════════════════════════════════════════════════

🧪 CÓMO PROBAR CON MÚLTIPLES USUARIOS:

Para simular múltiples usuarios conectados:

1. Abre varias pestañas del navegador en: http://localhost:5000
2. En cada pestaña, ingresa un nombre diferente
3. Verás cómo se actualizan los usuarios en el sidebar
4. Envía mensajes desde diferentes pestañas
5. Observa cómo aparecen los mensajes en todas las ventanas

Puedes abrir hasta 10-20 pestañas para simular un chat grupal.

═══════════════════════════════════════════════════════════════

🛑 PARA DETENER EL SERVIDOR:
   Presiona Ctrl+C en la terminal

═══════════════════════════════════════════════════════════════

💡 ¿QUÉ HACE ESTE CHATBOT?

   - Permite múltiples usuarios con nombres personalizados
   - Muestra lista de usuarios conectados en tiempo real
   - Retransmite mensajes entre todos los usuarios
   - Notifica cuando alguien entra o sale
   - Diferencia tus mensajes de los de otros usuarios
   - Funciona 100% en tu red local

═══════════════════════════════════════════════════════════════

🔄 EJECUTAR AMBOS CHATBOTS AL MISMO TIEMPO:

   Puedes ejecutar ESTE chatbot y el de Gemini simultáneamente
   porque usan puertos diferentes:

   - Chatbot Simple:  http://localhost:5000
   - Chatbot Gemini:  http://localhost:5001

   Solo abre dos terminales y ejecuta cada uno en su carpeta.

═══════════════════════════════════════════════════════════════

🎨 PERSONALIZACIÓN:

Puedes personalizar el chat editando:
- templates/chat.html - Para cambiar colores, diseño, textos
- servidor.py - Para modificar la lógica del servidor

═══════════════════════════════════════════════════════════════

⚠️  NOTAS:

    ✓ Este chatbot NO necesita API Key ni conexión a internet
    ✓ Funciona 100% local en tu computadora
    ✓ Los mensajes NO se guardan (desaparecen al cerrar el servidor)
    ✓ Los usuarios se identifican por su nombre elegido
    ✓ Soporta caracteres especiales en nombres y mensajes

═══════════════════════════════════════════════════════════════

🐛 PROBLEMAS COMUNES:

❌ Error: "No module named flask"
   ➜ Solución: pip install -r requirements.txt

❌ Error: "Address already in use"
   ➜ El puerto 5000 está ocupado
   ➜ Cierra cualquier servidor anterior
   ➜ O cambia el puerto en servidor.py (línea final)

❌ No veo mensajes de otros usuarios
   ➜ Asegúrate de abrir VARIAS pestañas
   ➜ Ingresa nombres diferentes en cada pestaña
   ➜ Verifica que todas estén conectadas al mismo servidor

❌ El sidebar de usuarios no se actualiza
   ➜ Actualiza la página (F5)
   ➜ Verifica la consola del navegador (F12) por errores
   ➜ Reinicia el servidor

═══════════════════════════════════════════════════════════════

🎯 CASOS DE USO:

- Chat interno de equipo
- Comunicación en LAN (red local)
- Prototipo de aplicación de mensajería
- Proyecto educativo para aprender WebSockets
- Base para un chat más complejo

═══════════════════════════════════════════════════════════════

📚 TECNOLOGÍAS USADAS:

- Flask: Framework web
- Flask-SocketIO: WebSockets en tiempo real
- JavaScript: Lógica del cliente
- HTML/CSS: Interfaz de usuario

═══════════════════════════════════════════════════════════════

¡Disfruta tu chat multiusuario! 💬
